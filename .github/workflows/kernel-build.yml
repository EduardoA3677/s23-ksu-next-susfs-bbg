# Script github action kanged from Ivan @reddxae with little bit my modification and addition
name: Build kernel (KSU Next Dev, susfs, scope-minimized manual hooks 1.4 and BBG integration)
on:
  #schedule:
    #- cron: '0 4 * * *'  # Runs every day at 04:00 UTC
  workflow_dispatch: # Allow manual trigger if needed
  push:
    paths:
      - ".github/workflows/kernel-build.yml"
      - "rezoss_susfs1512.patch"
      - "anykernel.sh"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Cleanup step
        uses: rokibhasansagar/slimhub_actions@main 

      - name: Set up the toolchain
        run: |
          sudo apt update
          sudo apt install -y \
            bc bison build-essential curl flex \
            g++-multilib gcc-multilib git gnupg \
            lib32readline-dev lib32z1-dev \
            libelf-dev liblz4-tool libssl-dev \
            lzop zlib1g-dev pahole dwarves cpio zip \
            python3 python-is-python3 tar perl lz4 jq

      - name: Clone source
        run: |
          git clone --depth=1 -b android13-5.15 https://github.com/samsung-sm8550/kernel_samsung_sm8550-common.git kernel

          # Determine the current kernel version
          echo "KERNEL_VERSION=$(grep -m1 '^SUBLEVEL =' ./kernel/Makefile | awk '{print $3}')" >> $GITHUB_ENV
          
      - name: Apply the KernelSU Next, SUSFS, manual hooks patch and Baseband Guard
        run: |
          cd kernel
          # Determine the tag of the latest release of KernelSU Next
          echo "KSUNEXT_VERSION=$(curl -s "https://api.github.com/repos/KernelSU-Next/KernelSU-Next/tags" | jq -r '.[0].name')" >> $GITHUB_ENV

          # Integrate the latest DEV version of KernelSU Next into the source
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next

          # Compute version code = commit count + 10200 (same scheme as KernelSU CI)
          COMMITS="$(git -C "./KernelSU-Next" rev-list --count HEAD || echo 0)"
          NEXT_VER_CODE=$((10200 + COMMITS))
          echo "NEXT_VER_CODE=$NEXT_VER_CODE" >> "$GITHUB_ENV"
               
          
          # Integrate latest SUSFS
          git clone -b gki-android13-5.15 --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git susfs4ksu

          # Determine susfs version
          cd susfs4ksu
          SUSFS_COMMIT=$(git rev-parse --short HEAD)
          SUSFS_VERSION=$(grep -oP '(?<=#define\s+SUSFS_VERSION\s+")[^"]+' kernel_patches/include/susfs.h 2>/dev/null) 
          echo "SUSFS_VERSION=$SUSFS_VERSION" >> "$GITHUB_ENV"
          cd ..

          # Begin susfs patching
          cp -rv ./susfs4ksu/kernel_patches/fs/* fs/
          cp -rv ./susfs4ksu/kernel_patches/include/linux/* include/linux/
          patch -p1 --fuzz=3 < "${GITHUB_WORKSPACE}/rezoss_susfs1512.patch"
          
          # Integrate scope-minimized manual KernelSU hooks via a patch
          curl -L -o manual-hook.patch https://github.com/WildKernels/kernel_patches/raw/f2227a36f02adf3776fc9d432734faf04787f3fa/next/scope_min_manual_hooks_v1.4.patch
          patch -p1 --fuzz=3 < manual-hook.patch
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./arch/arm64/configs/gki_defconfig

          # Adding BBG support
          wget -O- https://github.com/vc-teahouse/Baseband-guard/raw/main/setup.sh | bash
          echo "CONFIG_BBG=y" >> ./arch/arm64/configs/gki_defconfig
          sed -i 's/\(CONFIG_LSM="[^"]*\)"/\1,baseband_guard"/' ./arch/arm64/configs/gki_defconfig
          sed -i '/^config LSM$/,/^help$/{ /^[[:space:]]*default/ { /baseband_guard/! s/lockdown/lockdown,baseband_guard/ } }' ./security/Kconfig
          

      - name: Set up swap space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 16

      - name: Build the kernel
        run: |
          cd kernel
          chmod +x scripts/build.sh
          ./scripts/build.sh 2>&1 | tee "$GITHUB_WORKSPACE/build.log"

      - name: Package image with AnyKernel3
        run: |
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git anykernel
          cp kernel/out/arch/arm64/boot/Image.gz anykernel/
          cp -f "${GITHUB_WORKSPACE}/anykernel.sh" anykernel/

      - name: Upload the flashable kernel
        uses: actions/upload-artifact@v4
        with:
          name: common-${KERNEL_VERSION}_3d64R_next${KSUNEXT_VERSION}-${NEXT_VER_CODE}_susfs${SUSFS_VERSION}-manual-BBG
          path: anykernel/
