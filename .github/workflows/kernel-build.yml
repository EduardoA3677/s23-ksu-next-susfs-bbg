name: Build kernel from patches

on:
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/kernel-build.yml"
      - "rezoss_susfs1.5.10.patch"

env:
  KERNEL_REPO: https://github.com/samsung-sm8550/kernel_samsung_sm8550-common.git
  KERNEL_BRANCH: android13-5.15
  KSU_SETUP: https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh
  KSU_VARIANT: next
  SUSFS_REPO: https://gitlab.com/simonpunk/susfs4ksu.git
  SUSFS_BRANCH: gki-android13-5.15
  HOOK_PATCH_URL: https://github.com/WildKernels/kernel_patches/raw/f2227a36f02adf3776fc9d432734faf04787f3fa/next/scope_min_manual_hooks_v1.4.patch

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      actions: read
      id-token: write

    steps:
      - name: Checkout this repo (patches/workflow only)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Show workspace contents (debug)
        run: |
          set -euxo pipefail
          ls -la

      - name: Set timezone
        run: sudo timedatectl set-timezone Europe/Warsaw
        continue-on-error: true

      - name: Setup dependencies
        run: |
          sudo apt update
          sudo apt upgrade -y
          sudo apt install -y \
            bc bison build-essential ccache curl flex \
            g++-multilib gcc-multilib git git-lfs gnupg \
            gperf imagemagick lib32readline-dev lib32z1-dev \
            libelf-dev liblz4-tool libsdl1.2-dev libssl-dev \
            libxml2 libxml2-utils lzop pngcrush rsync \
            schedtool squashfs-tools xsltproc zip zlib1g-dev \
            openjdk-11-jdk pahole dwarves cpio python3 \
            python-is-python3 tar perl wget lz4 make

      - name: Setup swap space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 16

      - name: Configure ccache
        run: |
          set -euxo pipefail
          mkdir -p ~/.ccache
          {
            echo 'max_size = 5.0G'
            echo 'compression = true'
          } | tee ~/.ccache/ccache.conf

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-${{ hashFiles('rezoss_susfs1.5.10.patch') }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: Prepare build workspace
        run: |
          set -euxo pipefail
          mkdir -p "$GITHUB_WORKSPACE/work"
          cd "$GITHUB_WORKSPACE/work"
          git config --global init.defaultBranch main
          git config --global advice.detachedHead false

      - name: Clone kernel source
        working-directory: work
        run: |
          set -euxo pipefail
          git clone -b "${KERNEL_BRANCH}" --depth=1 "${KERNEL_REPO}" kernel
          cd kernel
          git rev-parse --short HEAD

      - name: Integrate KernelSU-Next
        working-directory: work/kernel
        shell: bash
        run: |
          set -euxo pipefail
          curl -LSs "${KSU_SETUP}" | bash -s "${KSU_VARIANT}"

      - name: Fetch susfs4ksu and apply base patch
        working-directory: work
        shell: bash
        run: |
          set -euxo pipefail
          git clone -b "${SUSFS_BRANCH}" --depth=1 "${SUSFS_REPO}" susfs4ksu
          cd kernel
          cp -rv ../susfs4ksu/kernel_patches/fs/* fs/ || true
          cp -rv ../susfs4ksu/kernel_patches/include/linux/* include/linux/ || true

      - name: Apply your local adjustments
        working-directory: work/kernel
        shell: bash
        run: |
          set -euxo pipefail
          if [[ -f "${GITHUB_WORKSPACE}/rezoss_susfs1.5.10.patch" ]]; then
            patch -p1 --fuzz=3 < "${GITHUB_WORKSPACE}/rezoss_susfs1.5.10.patch"
          else
            echo "rezoss_susfs1.5.10.patch not found in repo root; skipping." >&2
          fi

      - name: Apply Manual Hook patch
        working-directory: work/kernel
        shell: bash
        run: |
          set -euxo pipefail
          curl -L -o manual-hook.patch "${HOOK_PATCH_URL}"
          patch -p1 --fuzz=3 < manual-hook.patch

      - name: Show final diff (for traceability)
        working-directory: work/kernel
        run: |
          set -euxo pipefail
          git status --porcelain=v1
          (git diff --stat || true)

      - name: Build kernel (scripts/build.sh)
        working-directory: work/kernel
        shell: bash
        env:
          CCACHE_DIR: /home/runner/.ccache
          CC: ccache clang
        run: |
          set -euxo pipefail
          chmod +x scripts/build.sh
          ./scripts/build.sh 2>&1 | tee "$GITHUB_WORKSPACE/build.log"

      - name: Collect build outputs
        id: collect
        working-directory: work/kernel
        run: |
          set -euxo pipefail
          mkdir -p "$GITHUB_WORKSPACE/out_artifacts"
          find . -maxdepth 5 -type f \( -name "Image.gz" \) -print -exec cp -v {} "$GITHUB_WORKSPACE/out_artifacts/" \; || true
          echo "found=$(ls -1 "$GITHUB_WORKSPACE/out_artifacts" | wc -l)" >> $GITHUB_OUTPUT
      
      # -------- AnyKernel3 packaging starts here --------

      - name: Prepare AnyKernel3 template
        working-directory: work
        run: |
          set -euxo pipefail
          if [[ -d "${GITHUB_WORKSPACE}/anykernel" ]]; then
            rsync -a --delete "${GITHUB_WORKSPACE}/anykernel/" anykernel/
          else
            git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git anykernel
          fi
          ls -la anykernel

      - name: Copy build outputs into AnyKernel
        run: |
          set -euxo pipefail
          shopt -s nullglob
          dest="$GITHUB_WORKSPACE/work/anykernel"
          src="$GITHUB_WORKSPACE/out_artifacts"
          mkdir -p "$dest"
          # Copy anything we found (Image, Image.gz, Image.gz-dtb, etc.)
          for f in "$src"/*; do
            cp -v "$f" "$dest"/
          done

      - name: Edit anykernel.sh (kernel.string)
        working-directory: work/anykernel
        run: |
          set -euxo pipefail
          # Replace kernel.string if present; otherwise append it.
          if grep -qE '^kernel\.string=' anykernel.sh; then
            sed -i -E 's|^kernel\.string=.*|kernel.string="A kernel for S23 QCOM Series by edgarscirulis @ xda-developers and compiled with ksu-next_susfs by Rezoss"|' anykernel.sh
          else
            printf '\nkernel.string="A kernel for S23 QCOM Series by edgarscirulis @ xda-developers and compiled with ksu-next_susfs by Rezoss"\n' >> anykernel.sh
          fi
          echo "Updated kernel.string:"
          grep -E '^kernel\.string=' anykernel.sh || true

      - name: Package kernel with AnyKernel3
        id: package
        shell: bash
        run: |
          set -euxo pipefail

          KERNEL_DIR="$GITHUB_WORKSPACE/work/kernel"
          AK_DIR="$GITHUB_WORKSPACE/work/anykernel"

          # --- Extract version info from kernel Makefile ---
          VERSION="$(awk -F'= *' '/^VERSION[ \t]*=/{gsub(/ /,"",$2);print $2;exit}' "$KERNEL_DIR/Makefile")"
          PATCHLEVEL="$(awk -F'= *' '/^PATCHLEVEL[ \t]*=/{gsub(/ /,"",$2);print $2;exit}' "$KERNEL_DIR/Makefile")"
          SUBLEVEL="$(awk -F'= *' '/^SUBLEVEL[ \t]*=/{gsub(/ /,"",$2);print $2;exit}' "$KERNEL_DIR/Makefile")"

          # --- KernelSU-Next: get pure tag (e.g., 1.1.1), no "-NN-gSHA"
          (git -C "$KERNEL_DIR/KernelSU-Next" fetch --tags --force --prune || true)
          if NEXT_PURE="$(git -C "$KERNEL_DIR/KernelSU-Next" describe --tags --abbrev=0 2>/dev/null)"; then
            NEXT_TAG="$NEXT_PURE"
          else
            NEXT_RAW="$(git -C "$KERNEL_DIR/KernelSU-Next" describe --tags --always 2>/dev/null || echo HEAD)"
            NEXT_TAG="${NEXT_RAW%%-*}"  # cut off "-NN-gSHA" if present
          fi
          NEXT_TAG="${NEXT_TAG#v}"  # drop leading "v"

          # --- SUSFS version (prefer from local patch name, else repo tag/sha)
          SUSFSTAG="unknown"
          if ls "$GITHUB_WORKSPACE"/rezoss_susfs*.patch >/dev/null 2>&1; then
            P="$(ls "$GITHUB_WORKSPACE"/rezoss_susfs*.patch | head -n1)"
            SUSFSTAG="$(basename "$P" | grep -oE 'susfs[0-9]+(\.[0-9]+)*' | sed 's/^susfs//')"
          fi
          if [[ -z "${SUSFSTAG}" || "${SUSFSTAG}" == "unknown" ]]; then
            if [[ -d "$GITHUB_WORKSPACE/work/susfs4ksu/.git" ]]; then
              (git -C "$GITHUB_WORKSPACE/work/susfs4ksu" fetch --tags --force --prune || true)
              SUSFSTAG="$(git -C "$GITHUB_WORKSPACE/work/susfs4ksu" describe --tags --abbrev=0 2>/dev/null || \
                          git -C "$GITHUB_WORKSPACE/work/susfs4ksu" describe --tags --always 2>/dev/null || echo unknown)"
              SUSFSTAG="${SUSFSTAG#v}"
              SUSFSTAG="${SUSFSTAG%%-*}"  # trim "-NN-gSHA" if any
            fi
          fi

          ZIP_NAME="common-${VERSION}.${PATCHLEVEL}-${SUBLEVEL}_next${NEXT_TAG}_susfs${SUSFSTAG}-280925.zip"

          echo "Resolved:"
          echo "  VERSION.PATCHLEVEL = ${VERSION}.${PATCHLEVEL}"
          echo "  SUBLEVEL           = ${SUBLEVEL}"
          echo "  NEXT_TAG           = ${NEXT_TAG}"
          echo "  SUSFSTAG           = ${SUSFSTAG}"
          echo "  ZIP_NAME           = ${ZIP_NAME}"

          cd "$AK_DIR"
          # zip the *contents* (no nested anykernel/ folder)
          (shopt -s dotglob; zip -r9 "../${ZIP_NAME}" . -x "*.git*" "README.md" "*placeholder*" ".github/*")
          echo "zip_path=$GITHUB_WORKSPACE/work/${ZIP_NAME}" >> "$GITHUB_OUTPUT"
          echo "zip_name=${ZIP_NAME}" >> "$GITHUB_OUTPUT"

      - name: Upload AnyKernel zip (artifact container)
        uses: actions/upload-artifact@v4
        with:
          # IMPORTANT: do NOT end artifact name with ".zip" to avoid "file.zip.zip"
          name: action_build-${{ github.run_number }}
          path: ${{ steps.package.outputs.zip_path }}
          if-no-files-found: error
          
      - name: Upload to GitHub Release
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: run-${{ github.run_id }}
          name: "Kernel Build ${{ github.run_number }}"
          files: ${{ steps.package.outputs.zip_path }}
